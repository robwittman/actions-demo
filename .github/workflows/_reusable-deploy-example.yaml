name: Doing some deployment stuff

on:
  workflow_call:
    inputs:
      slack_enabled:
        description: "Wether to send Slack messages on start / finish"
        type: boolean
        required: false
        default: false
      channel_id:
        description: "Which channel to send Slack messages to"
        type: string
        required: false
        default: "<default_channel>"
      flux_repository:
        description: "The target Flux repository"
        type: string
        required: false
        default: some-org/some-gitops-repo

jobs:
  ## At a high level, let's say commits on main for a service, should
  # update a central Flux repo with the new SHA for that service. We
  # checkout both repos, update the code locally, create and automerge
  # the pull request, and send a slack Message.
  # In a lot of cases, the standard set of inputs described already may suffice
  # But with actions that have a handful of different configurations, having
  # to define each one as a top level input isn't always ideal. And with us
  # using shared reusable workflows, changing those requires edits to the central
  # repository, which introduces a non-zero amount of time that we block teams
  #
  # Essentially, the 'nice-to-have' is being able to dynamically override targeted
  # fields from the calling workflow, without having to define every single input
  # to the workflow
  deploy:
    steps:
      # Checkout the local repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Checkout the repository containing Flux manifests
      - name: Checkout Flux Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.flux_repository }}
          ref: main
          path: ${{ inputs.flux_repository }}

      # Generate commits on the flux repo to deploy
      # the necessary changes to Flux
      - name: Update flux
        run: |
          # This would be a shell script that grabs some information 
          # about the current release. Then it updates a repo setup with Flux
          # to update the required clusters / services

      # Then we create a pull a request with our changes
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04 # v4.2.3
        with:
          # Areas like this can be rather difficult to configure using inputs. If we want to have
          # some customized values for a few of these, each one needs to be configured as a top level
          # input. If we're able to dynamically override these, it provides some flexibility without
          # having to predefine every possible configuration at the onset
          path: ${{ inputs.flux_repository }}
          commit-message: "[${{ github.repository }}]: Automated deploy for ${{ github.sha }}"
          title: "Update ${{ github.repository }} to ${{ github.sha }}"
          token: ${{ github.token }}
          branch: ${{ github.repository }}-${{ github.ref_name }}
          base: main
          delete-branch: true
          body: |
            PR Automatically generated by workflow ${{ github.workflow }}

            Source Repository: [${{ github.repository }}](https://github.com/${{ github.repository }})
            Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commits/${{ github.sha }})

      # Let's set it to automerge
      - name: Enable Pull Request Automerge
        run: gh pr merge --merge --auto "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      # Send a notification to Slack
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: ${{ inputs.slack_channel }}
          # For posting a simple plain text message
          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}